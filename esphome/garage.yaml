substitutions:
  devicename: garage
  description: OpenGarage.io Device
  friendly_name: Garage
  auto_close_delay: "600s" # 10 minutes
  buzzer_delay: "0.5s"
  open_distance: "15" # less than or equal in cm
  open_close_time: "20s" # allow 20s for motion to complete
  reporting_delta: "25" # minimum 25cm change

# Device informations
esphome:
  name: $devicename
  comment: ${description}
  platform: ESP8266
  board: nodemcuv2
  esp8266_restore_from_flash: false

# Configure WiFi
wifi:
  ssid: "USS-NoT"
  password: "NOTDev@SJHome1985"
  ap: # Enable fallback hotspot in case wifi connection fails
    ssid: "ESPHome"

# Enable captive portal in case wifi connection fails
captive_portal:

# Provides basic web interface and firmware upload capability
web_server:
  port: 80

# Enable logging
logger:
  level: INFO
  baud_rate: 0 # Disable logging to serial

# Enable Home Assistant API
api:

# Enable OTA updates
ota:

mqtt:
  broker: mq.schettada.io
  port: 8883
  username: home
  password: Musafir@1985

# Enable status LED
status_led:
  pin:
    number: D0
    inverted: yes

# Define switches/relays
switch:
  # The door opener contact (internal)
  - platform: gpio
    id: garage_button
    pin: D8
    restore_mode: ALWAYS_OFF
    internal: true
    on_turn_on:
    - delay: 500ms
    - switch.turn_off: garage_button

# is the output used to create a buzzer # 
output:
  - platform: esp8266_pwm
    id: buzzer
    frequency: 750Hz
    pin: D7

# Define sensors
binary_sensor:
  - platform: status
    name: "${friendly_name} State"
    id: ${devicename}_state

sensor:
  - platform: wifi_signal
    name: "${friendly_name} WiFi Signal"
    id: ${devicename}_wifi_signal
    update_interval: 60s

  - platform: ultrasonic
    name: "${friendly_name} Distance"
    id: ${devicename}_distance
    trigger_pin: D6
    echo_pin: D5
    update_interval: 2s
    unit_of_measurement: cm
    accuracy_decimals: 0
    pulse_time: 10us
    timeout: 4.0m
    filters:
      - filter_out: nan  # filter timeouts
      - multiply: 100    # from meter to cm
      - sliding_window_moving_average:
          window_size: 10
          send_every: 5
          send_first_at: 5
      - delta: ${reporting_delta}

cover:
  - platform: template
    name: "${friendly_name} Control"
    id: ${devicename}_control
    device_class: garage
    # set the distance so it is equal or less than $open_distance when open
    lambda: !lambda |-
      if (id(${devicename}_distance).state <= ${open_distance}) {
        return COVER_OPEN;
      } else {
        return COVER_CLOSED;
      }

    open_action:
      - if:
          condition:
            lambda: "return id(${devicename}_control).position == cover::COVER_CLOSED;"
          then:
            # sound buzzer before door opens
            - output.set_level:
                id: buzzer
                level: 50%
            - delay: ${buzzer_delay}
            - output.turn_off: buzzer
            - switch.turn_on: garage_button
            - delay: ${open_close_time}
            - script.execute: auto_close

    close_action:
      - if:
          condition:
            lambda: "return id(${devicename}_control).position == cover::COVER_OPEN;"
          then:
            # sound buzzer before door closes
            - output.set_level:
                id: buzzer
                level: 50%
            - delay: ${buzzer_delay}
            - output.turn_off: buzzer
            - delay: ${buzzer_delay}
            - output.set_level:
                id: buzzer
                level: 50%
            - delay: ${buzzer_delay}
            - output.turn_off: buzzer
            - delay: ${buzzer_delay}
            - output.set_level:
                id: buzzer
                level: 50%
            - delay: ${buzzer_delay}
            - output.turn_off: buzzer
            - switch.turn_on: garage_button
            # Disable any auto close pending action
            - script.stop: auto_close
            - delay: ${open_close_time}

script:
  - id: auto_close
    then:
      - logger.log: "Automtically closing in ${auto_close_delay}"
      - delay: ${auto_close_delay}
      - logger.log: "Initiating automatic garage closing"
      - cover.close: ${devicename}_control